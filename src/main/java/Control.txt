public enum Rank {
    public int rankValue(){
        return rankValue;
    }
}

public enum Suit {

}

public class Card  {
    public int getValue(){
        return rank.rankValue();
    }

    public Suit getSuit(){
        return suit;
    }

    public Rank getRank(){
        return rank;
    }
}

public class Deck {
    public Deck(Deck c){
        Collections.copy(this.deck, c.getCards());
    }

    public Deck(Boolean createHandCard){
        deck = new ArrayList<>();
        if(createHandCard){
            for(Suit suit : Suit.values()){
                for(Rank rank : Rank.values()){
                    deck.add(new Card(rank, suit));
                }
            }
        }
    }

    public void addCard(Card card){
        deck.add(card);
    }

    public void addAllCards(ArrayList<Card> cards){
        deck.addAll(cards);
    }

    public void shuffle(){
        Collections.shuffle(deck);
    }

    public ArrayList<Card> getCards(){
        return deck;
    }

    public Card takeCard(){
        deck.remove(0);
        return deck.get(0);
    }

    public int cardRemains(){
        return deck.size();
    }

    public void clearDeck(){
        deck.clear();
    }
}

public class Hand {
    public void drawCard(Deck deck){
        handCard.add(deck.takeCard());
    }

    public void clearHandCard(){
        handCard.clear();
    }

    public Card showCard(int x){
        return handCard.get(x);
    }

    public int deckSize(){
        return handCard.size();
    }
    public int sumOfHandCard(){
        int sum=0;
        int aceRemain = 0;
        for(Card card : handCard){
            sum+=card.getValue();

            if(card.getRank().equals(Rank.ACE)){
                aceRemain++;
            }
        }
        while(sum>21&&aceRemain>0){
            aceRemain--;
            sum-=10;
        }
        return sum;
    }

    public Boolean blackJack(){
        if(sumOfHandCard()==21){
            return true;
        }
        return false;
    }

    public Boolean busted(){
        if(sumOfHandCard()>21){
            return true;
        }
        return false;
    }

    public void replaceCard(Deck deck){
        deck.addAllCards(handCard);
        handCard.clear();
    }
}

public class Game {
    Scanner enter = new Scanner(System.in);

    public void gameStart(){
        gameDeck.shuffle();
        startRound();
    }

    public void startRound(){
        System.out.println("================");
        System.out.println("開始遊戲"+"局數:"+this.round++ +" "+"win"+win+" "+"lose"+lose+" "+"tie"+tie);

        if(gameDeck.cardRemains()<=4){
            System.out.println("卡片不夠了，要重新遊玩遊戲嗎?(y/n)");
            String input = enter.next();
            if(input.equals("y")){
                gameOver();
            }
            else if(input.equals("n")){
                System.exit(0);
            }
        }

        pcHandDeck.drawCard(gameDeck);
        myHandDeck.drawCard(gameDeck);
        pcHandDeck.drawCard(gameDeck);
        myHandDeck.drawCard(gameDeck);

        pcShowCard();
        meShowCard();
        winOrLose();
        makeUrChoose();

    }

    public void pcShowCard(){
        System.out.println("電腦的牌:");
        System.out.println(pcHandDeck.showCard(1));
        System.out.println("電腦還有一張蓋牌");
    }

    public void meShowCard(){
        System.out.println("我的牌");
        System.out.println(myHandDeck);
        System.out.println("我的牌合計:");
        System.out.println(myHandDeck.sumOfHandCard());
    }

    public void winOrLose(){
        if(pcHandDeck.blackJack() || myHandDeck.busted()){
            if(myHandDeck.blackJack()){
                System.out.println("平手"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
                this.tie++;
                System.out.println("下一局開始.....");
                replacementWork();
                startRound();
            }
            System.out.println("電腦贏了"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
            this.lose++;
            System.out.println("下一局開始....");
            replacementWork();
            startRound();
        }
        else if (myHandDeck.blackJack() || pcHandDeck.busted()){
            System.out.println("你贏了"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
            this.win++;
            System.out.println("下一局開始...");
            replacementWork();
            startRound();
        }
    }

    public void compareSum(){
        if(myHandDeck.sumOfHandCard()> pcHandDeck.sumOfHandCard()){
            System.out.println("你贏了"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
            this.win++;
            System.out.println("下一局開始...");
            replacementWork();
            startRound();
        }
        else if(myHandDeck.sumOfHandCard()< pcHandDeck.sumOfHandCard()){
            System.out.println("電腦贏了"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
            this.lose++;
            System.out.println("下一局開始....");
            replacementWork();
            startRound();
        }
        else if(myHandDeck.sumOfHandCard()== pcHandDeck.sumOfHandCard()){
            System.out.println("平手"+" "+"電腦排組"+pcHandDeck+"電腦合計"+pcHandDeck.sumOfHandCard());
            this.tie++;
            System.out.println("下一局開始.....");
            replacementWork();
            startRound();
        }
    }

    public void makeUrChoose(){
        System.out.println("你要抽卡嗎?Ans:(y/n)"+"卡片剩餘: "+ gameDeck.cardRemains());
        String input;
        input = enter.next();
        if(input.equals("y")){
            if(gameDeck.cardRemains()<=2){
                startRound();
            }
            myHandDeck.drawCard(gameDeck);
            pcDrawCard();
            pcShowCards();
            System.out.println("我的合計:"+myHandDeck.sumOfHandCard()+" "+"我的排組"+myHandDeck);
            if(myHandDeck.sumOfHandCard()<21 && pcHandDeck.sumOfHandCard()<21){
                makeUrChoose();
            }
            winOrLose();
            compareSum();
        }
        else if(input.equals("n")){
            if(gameDeck.cardRemains()<=2){
                startRound();
            }
            pcDrawCard();
            winOrLose();
            compareSum();
        }
    }

    public void pcDrawCard() {
        if (pcHandDeck.sumOfHandCard() < 17) {
            pcHandDeck.drawCard(gameDeck);
        }
    }
    public void pcShowCards(){
        for(int i =1 ;i<pcHandDeck.deckSize();i++){
            System.out.println("電腦的第"+(i+1)+"張"+pcHandDeck.showCard(i));
        }
    }

    public void replacementWork(){
    myHandDeck.replaceCard(usedHandDeck);
    pcHandDeck.replaceCard(usedHandDeck);
    }

    public void cardReplaceBack(){
        gameDeck.addAllCards(usedHandDeck.getCards());
    }

    public void gameOver(){
        this.win = 0;
        this.lose = 0;
        this.tie = 0;
        this.round = 1;
        replacementWork();
        cardReplaceBack();
        usedHandDeck.clearDeck();
        gameStart();
    }
}